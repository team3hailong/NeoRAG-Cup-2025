import re
import time
from typing import List, Dict, Any
from dotenv import load_dotenv
import os

# Import centralized LLM configuration  
from llm_config import get_llm_response as get_llm_response_global, get_config_info

load_dotenv()

class QueryExpansion:
    """
    L·ªõp QueryExpansion th·ª±c hi·ªán c√°c k·ªπ thu·∫≠t m·ªü r·ªông c√¢u truy v·∫•n ƒë·ªÉ c·∫£i thi·ªán hi·ªáu su·∫•t retrieval trong RAG.
    
    C√°c k·ªπ thu·∫≠t ƒë∆∞·ª£c √°p d·ª•ng:
    1. LLM-Based Expansion - S·ª≠ d·ª•ng LLM ƒë·ªÉ t·∫°o c√°c c√°ch h·ªèi kh√°c nhau (combined_llm_expansion)
    2. Synonym Expansion - M·ªü r·ªông v·ªõi t·ª´ ƒë·ªìng nghƒ©a s·ª≠ d·ª•ng domain-specific keywords (synonym_expansion)
    3. Context-Aware Expansion - M·ªü r·ªông d·ª±a tr√™n ng·ªØ c·∫£nh v√† intent c·ªßa c√¢u h·ªèi (context_aware_expansion)
    4. Weighted Query Ranking - X·∫øp h·∫°ng c√°c query m·ªü r·ªông theo ƒë·ªô t∆∞∆°ng ƒë·ªìng v·ªõi query g·ªëc (rank_expanded_queries)
    """
    
    def __init__(self):
        # Use centralized LLM configuration
        config_info = get_config_info()
        # print(f"ü§ñ QueryExpansion using {config_info['provider'].upper()} - {config_info['model']}")
        self.llm_available = config_info['client_initialized']
        
        # Domain-specific keywords cho CLB ProPTIT - ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø
        self.proptit_keywords = {
            "clb": [
                'clb', 'club', 'c√¢u l·∫°c b·ªô'
            ],
            "proptit": [
                'l·∫≠p tr√¨nh ptit', 'proptit', 'programming ptit', 'pro'
            ],
            "thanh_vien": [
                'th√†nh vi√™n', 'member', 'sinh vi√™n', 'h·ªçc vi√™n', 'ng∆∞·ªùi tham gia', 
                'b·∫°n', 'em', 'anh', 'ch·ªã', 'c√°c em', 'm·ªçi ng∆∞·ªùi', 'h·ªçc sinh', 'mem'
            ],
            "hoat_dong": [
                'ho·∫°t ƒë·ªông', 's·ª± ki·ªán', 'event', 'workshop', 'seminar',
                'training', 'sinh ho·∫°t', 'bu·ªïi h·ªçc', 'ƒë√†o t·∫°o', 't·ªï ch·ª©c',
                'biggame', 'cu·ªôc thi', 'contest', 'competition', 'tournament'
            ],
            "lap_trinh": [
                'l·∫≠p tr√¨nh', 'programming', 'code', 'coding', 'thu·∫≠t to√°n', 'algorithm', 'CTDL',
                'ph√°t tri·ªÉn ph·∫ßn m·ªÅm', 'software development', 'c·∫•u tr√∫c d·ªØ li·ªáu', 'gi·∫£i thu·∫≠t',
                'DSA', 'CTDL&GT', 'oop', 'h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng'
            ],
            "ptit": [
                'ptit', 'h·ªçc vi·ªán', 'academy', 'tr∆∞·ªùng', 'university',
                'h·ªçc vi·ªán b∆∞u ch√≠nh vi·ªÖn th√¥ng', 'h·ªçc vi·ªán c√¥ng ngh·ªá bcvt',
                'bcvt', 'hv'
            ],
            "team_du_an": [
                'team', 'nh√≥m', 'd·ª± √°n', 'project', 's·∫£n ph·∫©m'
            ],
            "ky_nang": [
                'k·ªπ nƒÉng', 'skill', 'nƒÉng l·ª±c', 'kh·∫£ nƒÉng',
                'l√†m vi·ªác nh√≥m', 'teamwork', 'thuy·∫øt tr√¨nh',
                'qu·∫£n l√Ω', 'management', 'l√£nh ƒë·∫°o', 'giao ti·∫øp'
            ],
            "hoc_tap": [
                'h·ªçc t·∫≠p', 'learning', 'ƒë√†o t·∫°o', 'training', 'gi√°o d·ª•c', 'education',
                'kh√≥a h·ªçc', 'course', 'l·ªô tr√¨nh', 'l·ªô tr√¨nh h·ªçc', 'roadmap', 'roadmap h·ªçc t·∫≠p',
                'khung ch∆∞∆°ng tr√¨nh l·∫≠p tr√¨nh', 'k·ªπ nƒÉng l·∫≠p tr√¨nh c∆° b·∫£n', 'm√¥n h·ªçc', 'subject'
            ],
            "cuoc_thi_giai_thuong": [
                'cu·ªôc thi', 'contest', 'competition', 'tournament', 'gi·∫£i th∆∞·ªüng', 'award',
                'gi·∫£i nh·∫•t', 'gi·∫£i nh√¨', 'gi·∫£i ba', 'gi·∫£i khuy·∫øn kh√≠ch', 'prize',
                'huy ch∆∞∆°ng', 'medal', 'v√†ng', 'b·∫°c', 'ƒë·ªìng', 'v√¥ ƒë·ªãch', 'champion'
            ],
            "su_kien_dac_biet": [
                'biggame', 'spoj tournament', 'procwar', 'code battle', 'game jam',
                'marathon', 'sinh nh·∫≠t', 'camping', 'picnic', 'd√£ ngo·∫°i',
                'pama cup', 'progapp', 'icpc', 'digital race', 'Olympic'
            ],
            "cong_nghe": [
                'c++', 'java', 'python', 'javascript', 'html', 'css', 'sql',
                'h·ªçc m√°y', 'h·ªçc s√¢u', 'ML', 'DL', 'tr√≠ tu·ªá nh√¢n t·∫°o',
                'web', 'mobile', 'game', 'backend', 'frontend', 'fullstack',
                'react', 'angular', 'vue', 'nodejs', 'django', 'spring'
            ],
            "van_hoa_clb": [
                'ph∆∞∆°ng ch√¢m', 'chia s·∫ª ƒë·ªÉ c√πng nhau ph√°t tri·ªÉn', 'truy·ªÅn th·ªëng',
                'vƒÉn h√≥a', 'g·∫Øn k·∫øt', 'ƒëo√†n k·∫øt', 't∆∞∆°ng th√¢n t∆∞∆°ng √°i',
                'n·ªôi quy', 'quy ƒë·ªãnh', 'nghƒ©a v·ª•', 'quy·ªÅn l·ª£i', 'l·∫≠p tr√¨nh t·ª´ tr√°i tim',
                't√°c phong', 'vƒÉn h√≥a ·ª©ng x·ª≠', 'quy t·∫Øc ·ª©ng x·ª≠', 'phong c√°ch giao ti·∫øp',
                'n√©t vƒÉn h√≥a CLB', 'etiquette', 'manners', '·ª©ng x·ª≠ c√≥ vƒÉn h√≥a',
                'trang ph·ª•c', 'dress code', 'ƒë·ªìng ph·ª•c', 'quy ƒë·ªãnh trang ph·ª•c',
                's·ª≠ d·ª•ng tr·ª• s·ªü', 'c∆° s·ªü v·∫≠t ch·∫•t', 'ph√≤ng ban', 'ph√≤ng h·ªçp',
                'th√†nh vi√™n ti√™u bi·ªÉu', 'ti√™u ch√≠', 'ƒëi·ªÅu ki·ªán x√©t ch·ªçn', 
                'ti√™u chu·∫©n ƒë√°nh gi√°', 'c√°ch th·ª©c b·∫ßu ch·ªçn', 'reward', 'recognition',
                'khen th∆∞·ªüng', 'tuy√™n d∆∞∆°ng', 'ƒëi·ªÉm r√®n luy·ªán', 'vi ph·∫°m'
            ]
        }
    
    def _get_llm_response(self, messages: List[Dict], max_retries: int = 3) -> str:
        """Helper function ƒë·ªÉ g·ªçi LLM v·ªõi retry logic s·ª≠ d·ª•ng c·∫•u h√¨nh chung"""
        if not self.llm_available:
            print("‚ö†Ô∏è  LLM not available, returning empty response")
            return ""
            
        return get_llm_response_global(
            messages=messages,
            temperature=0.4,
            max_tokens=256,
            max_retries=max_retries
        )
    
    def combined_llm_expansion(self, query: str) -> List[str]:
        # Simplified prompt ƒë·ªÉ gi·∫£m complexity v√† tƒÉng success rate
        system_prompt = """T·∫°o 2 c√°ch h·ªèi kh√°c nhau cho c√¢u h·ªèi v·ªÅ CLB ProPTIT. 
Tr·∫£ v·ªÅ format: ["c√°ch h·ªèi 1", "c√°ch h·ªèi 2"]
Ch·ªâ thay ƒë·ªïi c√°ch di·ªÖn ƒë·∫°t, gi·ªØ nguy√™n √Ω nghƒ©a."""
        
        user_prompt = f"C√¢u h·ªèi: {query}"
        
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]
        
        response = self._get_llm_response(messages)
        
        try:
            import ast
            # T√¨m list trong response
            list_match = re.search(r'\[.*?\]', response, re.DOTALL)
            if list_match:
                variants = ast.literal_eval(list_match.group())
                if isinstance(variants, list) and len(variants) >= 2:
                    expanded = [query]
                    expanded.extend(variants[:2])  # Ch·ªâ l·∫•y 2 variants
                    return expanded
        except Exception as e:
            print(f"LLM expansion parsing error: {e}")
        
        # Fallback: rule-based simple rewrites
        fallback_variants = [
            query.replace("CLB", "C√¢u l·∫°c b·ªô"),
            query.replace("ProPTIT", "L·∫≠p tr√¨nh PTIT"),
        ]
        return [query] + [v for v in fallback_variants if v != query][:2]
    
    def synonym_expansion(self, query: str) -> List[str]:
        expanded_queries = [query]
        query_lower = query.lower()
        
        best_synonyms = []
        
        for category, synonyms in self.proptit_keywords.items():
            for synonym in synonyms:
                if synonym.lower() in query_lower:
                    for alternative in synonyms:
                        if (alternative.lower() != synonym.lower() and 
                            len(alternative) >= 3):  # Tr√°nh t·ª´ qu√° ng·∫Øn
                            pattern = re.compile(r'\b' + re.escape(synonym) + r'\b', flags=re.IGNORECASE)
                            new_query = pattern.sub(alternative, query)
                            if new_query != query and new_query not in expanded_queries:
                                best_synonyms.append(new_query)
                            break  # Ch·ªâ l·∫•y 1 alternative t·ªët nh·∫•t cho m·ªói synonym
                    break  # Ch·ªâ x·ª≠ l√Ω 1 synonym per category
        
        # Ch·ªçn 1-2 synonym expansion t·ªët nh·∫•t
        expanded_queries.extend(best_synonyms[:2])
        
        return expanded_queries
    
    def context_aware_expansion(self, query: str) -> List[str]:
        expanded = [query]
        query_lower = query.lower()
        
        # Intent-based query expansion v·ªõi variants th·ª±c t·∫ø h∆°n
        context_expansions = []
        
        # 1. C√¢u h·ªèi v·ªÅ th·ªùi gian th√†nh l·∫≠p, l·ªãch s·ª≠
        if any(word in query_lower for word in ["th√†nh l·∫≠p", "khi n√†o", "nƒÉm n√†o", "l·ªãch s·ª≠", "th√†nh l·∫≠p", "b·∫Øt ƒë·∫ßu"]):
            context_expansions = [
                query.replace("th√†nh l·∫≠p", "ra ƒë·ªùi").replace("khi n√†o", "nƒÉm n√†o"),
                query + " v√† ph∆∞∆°ng ch√¢m ho·∫°t ƒë·ªông"
            ]
        
        # 2. C√¢u h·ªèi v·ªÅ quy tr√¨nh tham gia
        elif any(word in query_lower for word in ["tham gia", "v√†o clb", "ƒëƒÉng k√Ω", "gia nh·∫≠p"]):
            context_expansions = [
                query.replace("tham gia", "gia nh·∫≠p"),
                query.replace("CLB", "c√¢u l·∫°c b·ªô l·∫≠p tr√¨nh ProPTIT")
            ]
        
        # 3. C√¢u h·ªèi v·ªÅ ho·∫°t ƒë·ªông, s·ª± ki·ªán  
        elif any(word in query_lower for word in ["ho·∫°t ƒë·ªông", "s·ª± ki·ªán", "event", "t·ªï ch·ª©c"]):
            context_expansions = [
                query.replace("ho·∫°t ƒë·ªông", "s·ª± ki·ªán"),
                query + " h√†ng nƒÉm c·ªßa CLB"
            ]
        
        # 4. C√¢u h·ªèi v·ªÅ team, c∆° c·∫•u
        elif any(word in query_lower for word in ["team", "nh√≥m", "ph√¢n chia", "c∆° c·∫•u"]):
            context_expansions = [
                query.replace("team", "nh√≥m d·ª± √°n"),
                query.replace("CLB ProPTIT", "c√¢u l·∫°c b·ªô")
            ]
        
        # 5. C√¢u h·ªèi v·ªÅ h·ªçc t·∫≠p, l·ªô tr√¨nh
        elif any(word in query_lower for word in ["h·ªçc", "l·ªô tr√¨nh", "training", "ƒë√†o t·∫°o", "ch∆∞∆°ng tr√¨nh"]):
            context_expansions = [
                query.replace("l·ªô tr√¨nh", "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o"),
                query.replace("h·ªçc", "training")
            ]
        
        # 6. C√¢u h·ªèi chung ho·∫∑c kh√¥ng match pattern c·ª• th·ªÉ
        else:
            # Generic expansions
            if "CLB" in query:
                context_expansions.append(query.replace("CLB", "C√¢u l·∫°c b·ªô"))
            if "ProPTIT" in query:
                context_expansions.append(query.replace("ProPTIT", "L·∫≠p tr√¨nh PTIT"))
        
        # L·ªçc v√† ch·ªâ l·∫•y expansions kh√°c v·ªõi c√¢u g·ªëc
        valid_expansions = [exp for exp in context_expansions if exp != query and exp.strip()]
        expanded.extend(valid_expansions[:2])  # Ch·ªâ l·∫•y 2 expansions t·ªët nh·∫•t
        
        return expanded
    
    def expand_query(self, query: str, techniques: List[str] = None, max_expansions: int = 5) -> List[str]:
        if techniques is None:
            techniques = ["synonym", "context", "combined_llm"]
        
        all_expanded = [query]  # C√¢u g·ªëc lu√¥n ƒë·ª©ng ƒë·∫ßu
        
        try:
            # 1. Rule-based synonym expansion (nhanh, kh√¥ng c·∫ßn LLM)
            if "synonym" in techniques:
                synonyms = self.synonym_expansion(query)
                all_expanded.extend(synonyms[1:2])  # Ch·ªâ l·∫•y 1 synonym t·ªët nh·∫•t
            
            # 2. Context-aware expansion (template-based, kh√¥ng c·∫ßn LLM)
            if "context" in techniques:
                context_aware = self.context_aware_expansion(query)
                all_expanded.extend(context_aware[1:3])  # L·∫•y 2 context variants
            
            # 3. LLM expansion (ch·ªâ khi c·∫ßn thi·∫øt v√† ch∆∞a ƒë·ªß)
            if "combined_llm" in techniques and len(all_expanded) < max_expansions:
                remaining_slots = max_expansions - len(all_expanded)
                if remaining_slots > 0:
                    combined = self.combined_llm_expansion(query)
                    all_expanded.extend(combined[1:remaining_slots + 1])
        
        except Exception as e:
            print(f"Error in query expansion: {e}")
            # Fallback: ch·ªâ tr·∫£ v·ªÅ c√¢u g·ªëc n·∫øu c√≥ l·ªói
            return [query]
        
        unique_expanded = []
        seen = set()
        for q in all_expanded:
            q_norm = q.lower().strip()
            if q_norm not in seen and q.strip():
                unique_expanded.append(q)
                seen.add(q_norm)
        
        # ƒê·∫£m b·∫£o c√¢u g·ªëc lu√¥n ƒë·∫ßu ti√™n
        if unique_expanded[0] != query:
            if query in unique_expanded:
                unique_expanded.remove(query)
            unique_expanded.insert(0, query)
        
        return unique_expanded[:max_expansions]